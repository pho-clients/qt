/**
 * Social Graph API
 * Pho Networks REST API
 *
 * OpenAPI spec version: 1.1.1
 * Contact: emre@phonetworks.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _SWG_SWGDefaultApi_H_
#define _SWG_SWGDefaultApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGEdge.h"
#include "SWGInline_response_200.h"
#include "SWGInline_response_200_1.h"
#include "SWGInline_response_200_2.h"
#include "SWGInline_response_200_3.h"
#include "SWGInline_response_200_4.h"
#include "SWGNode.h"
#include "SWGNodeEdge.h"
#include "SWGUUID.h"

#include <QObject>

namespace Swagger {

class SWGDefaultApi: public QObject {
    Q_OBJECT

public:
    SWGDefaultApi();
    SWGDefaultApi(QString host, QString basePath);
    ~SWGDefaultApi();

    QString host;
    QString basePath;

    void addAttribute(QString* value);
    void delAttribute();
    void delEntity();
    void getAllEdges(QString* uuid);
    void getAttribute(QString* uuid, QString* key);
    void getAttributes(QString* uuid);
    void getEdge(QString* uuid);
    void getEdgeGetters(QString* uuid);
    void getEdgeSetters(QString* uuid);
    void getFounder();
    void getGraph();
    void getIncomingEdges(QString* uuid);
    void getNode(QString* uuid);
    void getNodeEdge(QString* uuid, QString* edge);
    void getOutgoingEdges(QString* uuid);
    void getSpace();
    void getType(QString* uuid);
    void makeActor(QString* param1);
    void makeEdge(QString* param1);
    void setAttribute(QString* value);
    
private:
    void addAttributeCallback (HttpRequestWorker * worker);
    void delAttributeCallback (HttpRequestWorker * worker);
    void delEntityCallback (HttpRequestWorker * worker);
    void getAllEdgesCallback (HttpRequestWorker * worker);
    void getAttributeCallback (HttpRequestWorker * worker);
    void getAttributesCallback (HttpRequestWorker * worker);
    void getEdgeCallback (HttpRequestWorker * worker);
    void getEdgeGettersCallback (HttpRequestWorker * worker);
    void getEdgeSettersCallback (HttpRequestWorker * worker);
    void getFounderCallback (HttpRequestWorker * worker);
    void getGraphCallback (HttpRequestWorker * worker);
    void getIncomingEdgesCallback (HttpRequestWorker * worker);
    void getNodeCallback (HttpRequestWorker * worker);
    void getNodeEdgeCallback (HttpRequestWorker * worker);
    void getOutgoingEdgesCallback (HttpRequestWorker * worker);
    void getSpaceCallback (HttpRequestWorker * worker);
    void getTypeCallback (HttpRequestWorker * worker);
    void makeActorCallback (HttpRequestWorker * worker);
    void makeEdgeCallback (HttpRequestWorker * worker);
    void setAttributeCallback (HttpRequestWorker * worker);
    
signals:
    void addAttributeSignal(SWGInline_response_200_4* summary);
    void delAttributeSignal(SWGInline_response_200_4* summary);
    void delEntitySignal();
    void getAllEdgesSignal(SWGInline_response_200_3* summary);
    void getAttributeSignal(QString* summary);
    void getAttributesSignal(QList<QString*>* summary);
    void getEdgeSignal(SWGEdge* summary);
    void getEdgeGettersSignal(QList<QString*>* summary);
    void getEdgeSettersSignal(QList<QString*>* summary);
    void getFounderSignal(SWGInline_response_200* summary);
    void getGraphSignal(SWGInline_response_200_1* summary);
    void getIncomingEdgesSignal(QList<SWGNodeEdge*>* summary);
    void getNodeSignal(SWGNode* summary);
    void getNodeEdgeSignal(QList<QString*>* summary);
    void getOutgoingEdgesSignal(QList<SWGNodeEdge*>* summary);
    void getSpaceSignal(SWGInline_response_200_2* summary);
    void getTypeSignal(QString* summary);
    void makeActorSignal(SWGUUID* summary);
    void makeEdgeSignal(QString* summary);
    void setAttributeSignal(SWGInline_response_200_4* summary);
    
};
}
#endif
