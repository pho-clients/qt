/**
 * Social Graph API
 * Pho Networks REST API
 *
 * OpenAPI spec version: 1.1.1
 * Contact: emre@phonetworks.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "SWGDefaultApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGDefaultApi::SWGDefaultApi() {}

SWGDefaultApi::~SWGDefaultApi() {}

SWGDefaultApi::SWGDefaultApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGDefaultApi::addAttribute(QString* value) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/attribute/{key}");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = value.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::addAttributeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::addAttributeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInline_response_200_4* output = static_cast<SWGInline_response_200_4*>(create(json, QString("SWGInline_response_200_4")));
    

    worker->deleteLater();

    emit addAttributeSignal(output);
    
}
void
SWGDefaultApi::delAttribute() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/attribute/{key}");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::delAttributeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::delAttributeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInline_response_200_4* output = static_cast<SWGInline_response_200_4*>(create(json, QString("SWGInline_response_200_4")));
    

    worker->deleteLater();

    emit delAttributeSignal(output);
    
}
void
SWGDefaultApi::delEntity() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::delEntityCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::delEntityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit delEntitySignal();
}
void
SWGDefaultApi::getAllEdges(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/edges/all");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getAllEdgesCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getAllEdgesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInline_response_200_3* output = static_cast<SWGInline_response_200_3*>(create(json, QString("SWGInline_response_200_3")));
    

    worker->deleteLater();

    emit getAllEdgesSignal(output);
    
}
void
SWGDefaultApi::getAttribute(QString* uuid, QString* key) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/attribute/{key}");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));
    QString keyPathParam("{"); keyPathParam.append("key").append("}");
    fullPath.replace(keyPathParam, stringValue(key));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getAttributeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getAttributeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit getAttributeSignal(output);
    
}
void
SWGDefaultApi::getAttributes(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/attributes");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getAttributesCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getAttributesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getAttributesSignal(output);
    
}
void
SWGDefaultApi::getEdge(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/edge/{uuid}");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getEdgeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getEdgeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGEdge* output = static_cast<SWGEdge*>(create(json, QString("SWGEdge")));
    

    worker->deleteLater();

    emit getEdgeSignal(output);
    
}
void
SWGDefaultApi::getEdgeGetters(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/edges/getters");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getEdgeGettersCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getEdgeGettersCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getEdgeGettersSignal(output);
    
}
void
SWGDefaultApi::getEdgeSetters(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/edges/setters");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getEdgeSettersCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getEdgeSettersCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getEdgeSettersSignal(output);
    
}
void
SWGDefaultApi::getFounder() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/founder");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getFounderCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getFounderCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInline_response_200* output = static_cast<SWGInline_response_200*>(create(json, QString("SWGInline_response_200")));
    

    worker->deleteLater();

    emit getFounderSignal(output);
    
}
void
SWGDefaultApi::getGraph() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/graph");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getGraphCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getGraphCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInline_response_200_1* output = static_cast<SWGInline_response_200_1*>(create(json, QString("SWGInline_response_200_1")));
    

    worker->deleteLater();

    emit getGraphSignal(output);
    
}
void
SWGDefaultApi::getIncomingEdges(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/edges/in");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getIncomingEdgesCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getIncomingEdgesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGNodeEdge*>* output = new QList<SWGNodeEdge*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGNodeEdge* o = new SWGNodeEdge();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getIncomingEdgesSignal(output);
    
}
void
SWGDefaultApi::getNode(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getNodeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getNodeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGNode* output = static_cast<SWGNode*>(create(json, QString("SWGNode")));
    

    worker->deleteLater();

    emit getNodeSignal(output);
    
}
void
SWGDefaultApi::getNodeEdge(QString* uuid, QString* edge) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/{edge}");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));
    QString edgePathParam("{"); edgePathParam.append("edge").append("}");
    fullPath.replace(edgePathParam, stringValue(edge));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getNodeEdgeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getNodeEdgeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getNodeEdgeSignal(output);
    
}
void
SWGDefaultApi::getOutgoingEdges(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/edges/out");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getOutgoingEdgesCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getOutgoingEdgesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGNodeEdge*>* output = new QList<SWGNodeEdge*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGNodeEdge* o = new SWGNodeEdge();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getOutgoingEdgesSignal(output);
    
}
void
SWGDefaultApi::getSpace() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/space");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getSpaceCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getSpaceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInline_response_200_2* output = static_cast<SWGInline_response_200_2*>(create(json, QString("SWGInline_response_200_2")));
    

    worker->deleteLater();

    emit getSpaceSignal(output);
    
}
void
SWGDefaultApi::getType(QString* uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/type");

    QString uuidPathParam("{"); uuidPathParam.append("uuid").append("}");
    fullPath.replace(uuidPathParam, stringValue(uuid));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::getTypeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::getTypeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit getTypeSignal(output);
    
}
void
SWGDefaultApi::makeActor(QString* param1) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/actor");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = param1.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::makeActorCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::makeActorCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGUUID* output = static_cast<SWGUUID*>(create(json, QString("SWGUUID")));
    

    worker->deleteLater();

    emit makeActorSignal(output);
    
}
void
SWGDefaultApi::makeEdge(QString* param1) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/{edge}");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = param1.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::makeEdgeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::makeEdgeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit makeEdgeSignal(output);
    
}
void
SWGDefaultApi::setAttribute(QString* value) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{uuid}/attribute/{key}");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = value.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::setAttributeCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::setAttributeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInline_response_200_4* output = static_cast<SWGInline_response_200_4*>(create(json, QString("SWGInline_response_200_4")));
    

    worker->deleteLater();

    emit setAttributeSignal(output);
    
}
} /* namespace Swagger */
