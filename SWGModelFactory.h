/**
 * Social Graph API
 * Pho Networks REST API
 *
 * OpenAPI spec version: 1.1.1
 * Contact: emre@phonetworks.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef ModelFactory_H_
#define ModelFactory_H_


#include "SWGEdge.h"
#include "SWGInline_response_200.h"
#include "SWGInline_response_200_1.h"
#include "SWGInline_response_200_2.h"
#include "SWGInline_response_200_3.h"
#include "SWGInline_response_200_3_in.h"
#include "SWGInline_response_200_4.h"
#include "SWGNode.h"
#include "SWGNodeEdge.h"

namespace Swagger {
  inline void* create(QString type) {
    if(QString("SWGEdge").compare(type) == 0) {
      return new SWGEdge();
    }
    if(QString("SWGInline_response_200").compare(type) == 0) {
      return new SWGInline_response_200();
    }
    if(QString("SWGInline_response_200_1").compare(type) == 0) {
      return new SWGInline_response_200_1();
    }
    if(QString("SWGInline_response_200_2").compare(type) == 0) {
      return new SWGInline_response_200_2();
    }
    if(QString("SWGInline_response_200_3").compare(type) == 0) {
      return new SWGInline_response_200_3();
    }
    if(QString("SWGInline_response_200_3_in").compare(type) == 0) {
      return new SWGInline_response_200_3_in();
    }
    if(QString("SWGInline_response_200_4").compare(type) == 0) {
      return new SWGInline_response_200_4();
    }
    if(QString("SWGNode").compare(type) == 0) {
      return new SWGNode();
    }
    if(QString("SWGNodeEdge").compare(type) == 0) {
      return new SWGNodeEdge();
    }
    
    return nullptr;
  }

  inline void* create(QString json, QString type) {
    void* val = create(type);
    if(val != nullptr) {
      SWGObject* obj = static_cast<SWGObject*>(val);
      return obj->fromJson(json);
    }
    if(type.startsWith("QString")) {
      return new QString();
    }
    return nullptr;
  }
} /* namespace Swagger */

#endif /* ModelFactory_H_ */
